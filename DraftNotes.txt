
---





422 response code for the product with existing name on the database ( the response message is up to you )



- The spec/test classes that are in the /test directory contains tests for classes with public
access modifiers. But you can also add test for the methods that are have package level access
modifiers and just put the spec/test file on the same package directory.

*how to validate request body or request parameters*
Answer: @NotNull //Bean Validation package


advice:
- splice functions into small unit and somehow separate it into another class to keep the methods small
and unit test can be easily made into the function.
- unit test also serve as a documentation, so make the unit test name as descriptive as possible.
- 

>>>>>>>

entity -create table

using a sequence table (company practice)

scrpts and sql are written in snake_case.

research about primary key and foreign key.

for @JoinColumns: it will always focus on the foreign key as reference for column name.

table names and column names are set to singular by company practice.\

for every entity, the name of the sequence processor must be unique.

*research for types of *cascades*. and also what it does and what it means. 







---✅↓⇩





select nextval('<sequence_name>');
select * <table_name>;




load database tables: `\dt`




insert into product(nextval('product_sequence'), 'test', 'Product', 100, 9.0);

or  

insert into product (nextval('product_sequence'), 'test', 'Product', 100, 9.0),
(nextval('product_sequence'), 'test', 'Product', 100, 9.0);

note: you can use commma to separate 2 rows of data to insert into the database as shown above.^


offset = more of like page, and it starts with 0.
max = maximum of items on a page loaded.

by company practice: creating the the interface for PagingAndSorting must on the package level.

SELECT * FROM products where description like '%<word-to-filter>%;

limit acts like the max in the querry pagination


select count(*) from product;


by - create *where clause:

transactional annotation makes use of the begin and rollback in database level operation. It performs rollback when there is an 
exception thrown inside the function. This is done in order to protect the data when there is an exception 
that occured when performing the actions inside the function. the @transaction just ends when the save() is envoked.

note: study about >> begin, commit and rollback in operating on database level.

Note: company practice is to avoid making too much trips to the database;

Note: remember in making functions, it must be testable.

Note: if you are taking many trips to the database and changing data, use @Transactional








## Everything that gone wrong:
1. Order Calculator
2. Order Product Modifier 
3. 

sudo -u postgres psql 

pg_dump -U postgres -h localhost -d order_management > sample.psql
pg_dump -U <user_name> -h localhost -d (db_name) > (filename).psql







