Things to talk with froi later:
    1. About LAMBDA expression being limited to be used on functional interfaces
    2. Clarify and eleborate dependency injection



# Topics and tips on "JAVA BEST PRACTICES"
1. Consider Static Factory methods instead of Constructors
    * One advantage of static factor is that, unlike constructors, they have names.
    * A second advantage of static factory method is that, unlike constructors, they
        are not required to create a new object each time they are invoked.
    * Third advante of static factory methods is that, unlike constructors, they can 
        return an object of any subtype of their return type.
    * A fourth advantage if static factory method is that the class of the returned
        object can vary from call to call as a function of the input parameters.
    * Fifth advantage of static factory methods is that the class of the returned object
        need not to exist when the class containing the method is written.

2. Consider a builder when faced with many constructor parameters

3. Enforce the singleton property with a private constructor or an enum type

4. Enforce noninstantiability with a private constructor

5. Prefer dependency injection to hardwirring resources

6. Avoid creating unnecessary objects




>>>>>>>>>>>>>>>
Mentor: Chuck Saliente


Spring Notes:

- String and Spring boot are application framework
- application framework helps developers in simplifying works in writting boilerplate codes:
    - framework are bundles of codes that are used by devs and save them by not codding from scratch
- spring is the core technology used by spring boot. the difference being that spring is more flexible than spring boot, spring being the
    native (framework).
- 

Spring features:
- Light weight
- Aspect Oriented Programming
- Transaction Manageement
- Container
- Dependecy Injection


Spring bean - instance of a class that is managed by spring

Spring Container:
    - BeanFactory
    - ApplicationContext



//note: add this to TDD Notes

Software Requirements:
    Software must do three things:
    - "It must work"
    - "It must be understandable"
    - "It must be updatable"

Flow of TDD (RED - GREEN - REFACTOR):
    "Write a failing test"
    "Do the MINIMUM to pass the test"
    "refactor() Remove any duplication"

Refactoring - Refactoring is the process of changing a software system in
such a way that it does not alter the external behavior of the code yet improves
its internal structure. "Martin Fowler"


#Tips and techniques:
    - Break it into components:
     - Take a minute to write out a few of the components that need to be built
            (product backlog).
     - 


































